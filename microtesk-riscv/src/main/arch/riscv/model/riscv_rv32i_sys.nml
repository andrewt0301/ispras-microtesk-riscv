/*
 * Copyright 2017-2018 ISP RAS (http://www.ispras.ru)
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */

#ifndef RISCV_RV32I_SYS_INCLUDED
#define RISCV_RV32I_SYS_INCLUDED

//==================================================================================================
// Control and status registers (CSRs)
//==================================================================================================

// 2 ** 12 (4096) registers
reg CSR[1 << 12, XWORD]

// Index of the currently accessed register
var csr_index[card(12)]

//==================================================================================================
// User Trap Setup

// User status register
mode USTATUS() = CSR[0x000]
  init = { csr_index = 0x000; }
  syntax = format("ustatus")
  image = format("%12s", csr_index)

// User interrupt-enable register
mode UIE() = CSR[0x004]
  init = { csr_index = 0x004; }
  syntax = format("uie")
  image = format("%12s", csr_index)

// User trap handler base address
mode UTVEC() = CSR[0x005]
  init = { csr_index = 0x005; }
  syntax = format("utvec")
  image = format("%12s", csr_index)

//==================================================================================================
// User Trap Handling

// Scratch register for user trap handlers
mode USCRATCH() = CSR[0x040]
  init = { csr_index = 0x040; }
  syntax = format("uscratch")
  image = format("%12s", csr_index)

// User exception program counter
mode UEPC() = CSR[0x041]
  init = { csr_index = 0x041; }
  syntax = format("uepc")
  image = format("%12s", csr_index)

// User trap cause
mode UCAUSE() = CSR[0x042]
  init = { csr_index = 0x042; }
  syntax = format("ucause")
  image = format("%12s", csr_index)

// User bad address or instruction
mode UTVAL() = CSR[0x043]
  init = { csr_index = 0x043; }
  syntax = format("utval")
  image = format("%12s", csr_index)

// User interrupt pending
mode UIP() = CSR[0x044]
  init = { csr_index = 0x044; }
  syntax = format("uip")
  image = format("%12s", csr_index)

//==================================================================================================
// User Floating-Point CSRs

// Floating-Point Accrued Exceptions
mode FFLAGS() = CSR[0x001]
  init = { csr_index = 0x001; }
  syntax = format("fflags")
  image = format("%12s", csr_index)

// Floating-Point Dynamic Rounding Mode
mode FRM() = CSR[0x002]
  init = { csr_index = 0x002; }
  syntax = format("frm")
  image = format("%12s", csr_index)

// Floating-Point Control and Status Register (frm + fflags)
mode FCSR() = CSR[0x003]
  init = { csr_index = 0x003; }
  syntax = format("fcsr")
  image = format("%12s", csr_index)

//==================================================================================================
// User Counter/Timers

// Cycle counter for RDCYCLE instruction
mode CYCLE() = CSR[0xC00]
  init = { csr_index = 0xC00; }
  syntax = format("cycle")
  image = format("%12s", csr_index)

// Timer for RDTIME instruction
mode TIME() = CSR[0xC01]
  init = { csr_index = 0xC01; }
  syntax = format("time")
  image = format("%12s", csr_index)

// Instructions-retired counter for RDINSTRET instruction
mode INSTRET() = CSR[0xC02]
  init = { csr_index = 0xC02; }
  syntax = format("instret")
  image = format("%12s", csr_index)

// Performance-monitoring counter
mode HPMCOUNTER3() = CSR[0xC03]
  init = { csr_index = 0xC03; }
  syntax = format("hpmcounter3")
  image = format("%12s", csr_index)

// Performance-monitoring counter
mode HPMCOUNTER4() = CSR[0xC04]
  init = { csr_index = 0xC04; }
  syntax = format("hpmcounter4")
  image = format("%12s", csr_index)

// Performance-monitoring counter
mode HPMCOUNTER5() = CSR[0xC05]
  init = { csr_index = 0xC05; }
  syntax = format("hpmcounter5")
  image = format("%12s", csr_index)

// Performance-monitoring counter
mode HPMCOUNTER6() = CSR[0xC06]
  init = { csr_index = 0xC06; }
  syntax = format("hpmcounter6")
  image = format("%12s", csr_index)

// Performance-monitoring counter
mode HPMCOUNTER7() = CSR[0xC07]
  init = { csr_index = 0xC07; }
  syntax = format("hpmcounter7")
  image = format("%12s", csr_index)

// Performance-monitoring counter
mode HPMCOUNTER8() = CSR[0xC08]
  init = { csr_index = 0xC08; }
  syntax = format("hpmcounter8")
  image = format("%12s", csr_index)

// Performance-monitoring counter
mode HPMCOUNTER9() = CSR[0xC09]
  init = { csr_index = 0xC09; }
  syntax = format("hpmcounter9")
  image = format("%12s", csr_index)

// Performance-monitoring counter
mode HPMCOUNTER10() = CSR[0xC0A]
  init = { csr_index = 0xC0A; }
  syntax = format("hpmcounter10")
  image = format("%12s", csr_index)

// Performance-monitoring counter
mode HPMCOUNTER11() = CSR[0xC0B]
  init = { csr_index = 0xC0B; }
  syntax = format("hpmcounter11")
  image = format("%12s", csr_index)

// Performance-monitoring counter
mode HPMCOUNTER12() = CSR[0xC0C]
  init = { csr_index = 0xC0C; }
  syntax = format("hpmcounter12")
  image = format("%12s", csr_index)

// Performance-monitoring counter
mode HPMCOUNTER13() = CSR[0xC0D]
  init = { csr_index = 0xC0D; }
  syntax = format("hpmcounter13")
  image = format("%12s", csr_index)

// Performance-monitoring counter
mode HPMCOUNTER14() = CSR[0xC0E]
  init = { csr_index = 0xC0E; }
  syntax = format("hpmcounter14")
  image = format("%12s", csr_index)

// Performance-monitoring counter
mode HPMCOUNTER15() = CSR[0xC0F]
  init = { csr_index = 0xC0F; }
  syntax = format("hpmcounter15")
  image = format("%12s", csr_index)

// Performance-monitoring counter
mode HPMCOUNTER16() = CSR[0xC10]
  init = { csr_index = 0xC10; }
  syntax = format("hpmcounter16")
  image = format("%12s", csr_index)

// Performance-monitoring counter
mode HPMCOUNTER17() = CSR[0xC11]
  init = { csr_index = 0xC11; }
  syntax = format("hpmcounter17")
  image = format("%12s", csr_index)

// Performance-monitoring counter
mode HPMCOUNTER18() = CSR[0xC12]
  init = { csr_index = 0xC12; }
  syntax = format("hpmcounter18")
  image = format("%12s", csr_index)

// Performance-monitoring counter
mode HPMCOUNTER19() = CSR[0xC13]
  init = { csr_index = 0xC13; }
  syntax = format("hpmcounter19")
  image = format("%12s", csr_index)

// Performance-monitoring counter
mode HPMCOUNTER20() = CSR[0xC14]
  init = { csr_index = 0xC14; }
  syntax = format("hpmcounter20")
  image = format("%12s", csr_index)

// Performance-monitoring counter
mode HPMCOUNTER21() = CSR[0xC15]
  init = { csr_index = 0xC15; }
  syntax = format("hpmcounter21")
  image = format("%12s", csr_index)

// Performance-monitoring counter
mode HPMCOUNTER22() = CSR[0xC16]
  init = { csr_index = 0xC16; }
  syntax = format("hpmcounter22")
  image = format("%12s", csr_index)

// Performance-monitoring counter
mode HPMCOUNTER23() = CSR[0xC17]
  init = { csr_index = 0xC17; }
  syntax = format("hpmcounter23")
  image = format("%12s", csr_index)

// Performance-monitoring counter
mode HPMCOUNTER24() = CSR[0xC18]
  init = { csr_index = 0xC18; }
  syntax = format("hpmcounter24")
  image = format("%12s", csr_index)

// Performance-monitoring counter
mode HPMCOUNTER25() = CSR[0xC19]
  init = { csr_index = 0xC19; }
  syntax = format("hpmcounter25")
  image = format("%12s", csr_index)

// Performance-monitoring counter
mode HPMCOUNTER26() = CSR[0xC1A]
  init = { csr_index = 0xC1A; }
  syntax = format("hpmcounter26")
  image = format("%12s", csr_index)

// Performance-monitoring counter
mode HPMCOUNTER27() = CSR[0xC1B]
  init = { csr_index = 0xC1B; }
  syntax = format("hpmcounter27")
  image = format("%12s", csr_index)

// Performance-monitoring counter
mode HPMCOUNTER28() = CSR[0xC1C]
  init = { csr_index = 0xC1C; }
  syntax = format("hpmcounter28")
  image = format("%12s", csr_index)

// Performance-monitoring counter
mode HPMCOUNTER29() = CSR[0xC1D]
  init = { csr_index = 0xC1D; }
  syntax = format("hpmcounter29")
  image = format("%12s", csr_index)

// Performance-monitoring counter
mode HPMCOUNTER30() = CSR[0xC1E]
  init = { csr_index = 0xC1E; }
  syntax = format("hpmcounter30")
  image = format("%12s", csr_index)

// Performance-monitoring counter
mode HPMCOUNTER31() = CSR[0xC1F]
  init = { csr_index = 0xC1F; }
  syntax = format("hpmcounter31")
  image = format("%12s", csr_index)

// Upper 32 bits of cycle, RV32I only
mode CYCLEH() = CSR[0xC80]
  init = { csr_index = 0xC80; }
  syntax = format("cycleh")
  image = format("%12s", csr_index)

// Upper 32 bits of time, RV32I only
mode TIMEH() = CSR[0xC81]
  init = { csr_index = 0xC81; }
  syntax = format("timeh")
  image = format("%12s", csr_index)

// Upper 32 bits of instret, RV32I only
mode INSTRETH() = CSR[0xC82]
  init = { csr_index = 0xC82; }
  syntax = format("instreth")
  image = format("%12s", csr_index)

// Upper 32 bits of hpmcounter3, RV32I only
mode HPMCOUNTER3H() = CSR[0xC83]
  init = { csr_index = 0xC83; }
  syntax = format("hpmcounter3h")
  image = format("%12s", csr_index)

// Upper 32 bits of hpmcounter4, RV32I only
mode HPMCOUNTER4H() = CSR[0xC84]
  init = { csr_index = 0xC84; }
  syntax = format("hpmcounter4h")
  image = format("%12s", csr_index)

// Upper 32 bits of hpmcounter5, RV32I only
mode HPMCOUNTER5H() = CSR[0xC85]
  init = { csr_index = 0xC85; }
  syntax = format("hpmcounter5h")
  image = format("%12s", csr_index)

// Upper 32 bits of hpmcounter6, RV32I only
mode HPMCOUNTER6H() = CSR[0xC86]
  init = { csr_index = 0xC86; }
  syntax = format("hpmcounter6h")
  image = format("%12s", csr_index)

// Upper 32 bits of hpmcounter7, RV32I only
mode HPMCOUNTER7H() = CSR[0xC87]
  init = { csr_index = 0xC87; }
  syntax = format("hpmcounter7h")
  image = format("%12s", csr_index)

// Upper 32 bits of hpmcounter8, RV32I only
mode HPMCOUNTER8H() = CSR[0xC88]
  init = { csr_index = 0xC88; }
  syntax = format("hpmcounter8h")
  image = format("%12s", csr_index)

// Upper 32 bits of hpmcounter9, RV32I only
mode HPMCOUNTER9H() = CSR[0xC89]
  init = { csr_index = 0xC89; }
  syntax = format("hpmcounter9h")
  image = format("%12s", csr_index)

// Upper 32 bits of hpmcounter10, RV32I only
mode HPMCOUNTER10H() = CSR[0xC8A]
  init = { csr_index = 0xC8A; }
  syntax = format("hpmcounter10h")
  image = format("%12s", csr_index)

// Upper 32 bits of hpmcounter11, RV32I only
mode HPMCOUNTER11H() = CSR[0xC8B]
  init = { csr_index = 0xC8B; }
  syntax = format("hpmcounter11h")
  image = format("%12s", csr_index)

// Upper 32 bits of hpmcounter12, RV32I only
mode HPMCOUNTER12H() = CSR[0xC8C]
  init = { csr_index = 0xC8C; }
  syntax = format("hpmcounter12h")
  image = format("%12s", csr_index)

// Upper 32 bits of hpmcounter13, RV32I only
mode HPMCOUNTER13H() = CSR[0xC8D]
  init = { csr_index = 0xC8D; }
  syntax = format("hpmcounter13h")
  image = format("%12s", csr_index)

// Upper 32 bits of hpmcounter14, RV32I only
mode HPMCOUNTER14H() = CSR[0xC8E]
  init = { csr_index = 0xC8E; }
  syntax = format("hpmcounter14h")
  image = format("%12s", csr_index)

// Upper 32 bits of hpmcounter15, RV32I only
mode HPMCOUNTER15H() = CSR[0xC8F]
  init = { csr_index = 0xC8F; }
  syntax = format("hpmcounter15h")
  image = format("%12s", csr_index)

// Upper 32 bits of hpmcounter16, RV32I only
mode HPMCOUNTER16H() = CSR[0xC90]
  init = { csr_index = 0xC90; }
  syntax = format("hpmcounter16h")
  image = format("%12s", csr_index)

// Upper 32 bits of hpmcounter17, RV32I only
mode HPMCOUNTER17H() = CSR[0xC91]
  init = { csr_index = 0xC91; }
  syntax = format("hpmcounter17h")
  image = format("%12s", csr_index)

// Upper 32 bits of hpmcounter18, RV32I only
mode HPMCOUNTER18H() = CSR[0xC92]
  init = { csr_index = 0xC92; }
  syntax = format("hpmcounter18h")
  image = format("%12s", csr_index)

// Upper 32 bits of hpmcounter19, RV32I only
mode HPMCOUNTER19H() = CSR[0xC93]
  init = { csr_index = 0xC93; }
  syntax = format("hpmcounter19h")
  image = format("%12s", csr_index)

// Upper 32 bits of hpmcounter20, RV32I only
mode HPMCOUNTER20H() = CSR[0xC94]
  init = { csr_index = 0xC94; }
  syntax = format("hpmcounter20h")
  image = format("%12s", csr_index)

// Upper 32 bits of hpmcounter21, RV32I only
mode HPMCOUNTER21H() = CSR[0xC95]
  init = { csr_index = 0xC95; }
  syntax = format("hpmcounter21h")
  image = format("%12s", csr_index)

// Upper 32 bits of hpmcounter22, RV32I only
mode HPMCOUNTER22H() = CSR[0xC96]
  init = { csr_index = 0xC96; }
  syntax = format("hpmcounter22h")
  image = format("%12s", csr_index)

// Upper 32 bits of hpmcounter23, RV32I only
mode HPMCOUNTER23H() = CSR[0xC97]
  init = { csr_index = 0xC97; }
  syntax = format("hpmcounter23h")
  image = format("%12s", csr_index)

// Upper 32 bits of hpmcounter24, RV32I only
mode HPMCOUNTER24H() = CSR[0xC98]
  init = { csr_index = 0xC98; }
  syntax = format("hpmcounter24h")
  image = format("%12s", csr_index)

// Upper 32 bits of hpmcounter25, RV32I only
mode HPMCOUNTER25H() = CSR[0xC99]
  init = { csr_index = 0xC99; }
  syntax = format("hpmcounter25h")
  image = format("%12s", csr_index)

// Upper 32 bits of hpmcounter26, RV32I only
mode HPMCOUNTER26H() = CSR[0xC9A]
  init = { csr_index = 0xC9A; }
  syntax = format("hpmcounter26h")
  image = format("%12s", csr_index)

// Upper 32 bits of hpmcounter27, RV32I only
mode HPMCOUNTER27H() = CSR[0xC9B]
  init = { csr_index = 0xC9B; }
  syntax = format("hpmcounter27h")
  image = format("%12s", csr_index)

// Upper 32 bits of hpmcounter28, RV32I only
mode HPMCOUNTER28H() = CSR[0xC9C]
  init = { csr_index = 0xC9C; }
  syntax = format("hpmcounter28h")
  image = format("%12s", csr_index)

// Upper 32 bits of hpmcounter29, RV32I only
mode HPMCOUNTER29H() = CSR[0xC9D]
  init = { csr_index = 0xC9D; }
  syntax = format("hpmcounter29h")
  image = format("%12s", csr_index)

// Upper 32 bits of hpmcounter30, RV32I only
mode HPMCOUNTER30H() = CSR[0xC9E]
  init = { csr_index = 0xC9E; }
  syntax = format("hpmcounter30h")
  image = format("%12s", csr_index)

// Upper 32 bits of hpmcounter31, RV32I only
mode HPMCOUNTER31H() = CSR[0xC9F]
  init = { csr_index = 0xC9F; }
  syntax = format("hpmcounter31h")
  image = format("%12s", csr_index)

//==================================================================================================
// Supervisor Trap Setup

// Supervisor status register
mode SSTATUS() = CSR[0x100]
  init = { csr_index = 0x100; }
  syntax = format("sstatus")
  image = format("%12s", csr_index)

// Supervisor exception delegation register
mode SEDELEG() = CSR[0x102]
  init = { csr_index = 0x102; }
  syntax = format("sedeleg")
  image = format("%12s", csr_index)

// Supervisor interrupt delegation register
mode SIDELEG() = CSR[0x103]
  init = { csr_index = 0x103; }
  syntax = format("sideleg")
  image = format("%12s", csr_index)

// Supervisor interrupt-enable register
mode SIE() = CSR[0x104]
  init = { csr_index = 0x104; }
  syntax = format("sie")
  image = format("%12s", csr_index)

// Supervisor trap handler base address
mode STVEC() = CSR[0x105]
  init = { csr_index = 0x105; }
  syntax = format("stvec")
  image = format("%12s", csr_index)

// Supervisor counter enable
mode SCOUNTEREN() = CSR[0x106]
  init = { csr_index = 0x106; }
  syntax = format("scounteren")
  image = format("%12s", csr_index)

//==================================================================================================
// Supervisor Trap Handling

// Scratch register for supervisor trap handlers
mode SSCRATCH() = CSR[0x140]
  init = { csr_index = 0x140; }
  syntax = format("sscratch")
  image = format("%12s", csr_index)

// Supervisor exception program counter
mode SEPC() = CSR[0x141]
  init = { csr_index = 0x141; }
  syntax = format("sepc")
  image = format("%12s", csr_index)

// Supervisor trap cause
mode SCAUSE() = CSR[0x142]
  init = { csr_index = 0x142; }
  syntax = format("scause")
  image = format("%12s", csr_index)

// Supervisor bad address or instruction
mode STVAL() = CSR[0x143]
  init = { csr_index = 0x143; }
  syntax = format("stval")
  image = format("%12s", csr_index)

// Supervisor interrupt pending
mode SIP() = CSR[0x144]
  init = { csr_index = 0x144; }
  syntax = format("sip")
  image = format("%12s", csr_index)

//==================================================================================================
// Supervisor Protection and Translation

// Supervisor address translation and protection
mode SATP() = CSR[0x180]
  init = { csr_index = 0x180; }
  syntax = format("satp")
  image = format("%12s", csr_index)

//==================================================================================================
// Machine Information Registers

// Vendor ID
mode MVENDORID() = CSR[0xF11]
  init = { csr_index = 0xF11; }
  syntax = format("mvendorid")
  image = format("%12s", csr_index)

// Architecture ID
mode MARCHID() = CSR[0xF12]
  init = { csr_index = 0xF12; }
  syntax = format("marchid")
  image = format("%12s", csr_index)

// Implementation ID
mode MIMPID() = CSR[0xF13]
  init = { csr_index = 0xF13; }
  syntax = format("mimpid")
  image = format("%12s", csr_index)

// Hardware thread ID
mode MHARTID() = CSR[0xF14]
  init = { csr_index = 0xF14; }
  syntax = format("mhartid")
  image = format("%12s", csr_index)

//==================================================================================================
// Machine Trap Setup

// Machine status register
mode MSTATUS() = CSR[0x300]
  init = { csr_index = 0x300; }
  syntax = format("mstatus")
  image = format("%12s", csr_index)

// ISA and extensions
mode MISA() = CSR[0x301]
  init = { csr_index = 0x301; }
  syntax = format("misa")
  image = format("%12s", csr_index)

// Machine exception delegation register
mode MEDELEG() = CSR[0x302]
  init = { csr_index = 0x302; }
  syntax = format("medeleg")
  image = format("%12s", csr_index)

// Machine interrupt delegation register
mode MIDELEG() = CSR[0x303]
  init = { csr_index = 0x303; }
  syntax = format("mideleg")
  image = format("%12s", csr_index)

// Machine interrupt-enable register
mode MIE() = CSR[0x304]
  init = { csr_index = 0x304; }
  syntax = format("mie")
  image = format("%12s", csr_index)

// Machine trap-handler base address
mode MTVEC() = CSR[0x305]
  init = { csr_index = 0x305; }
  syntax = format("mtvec")
  image = format("%12s", csr_index)

// Machine counter enable
mode MCOUNTEREN() = CSR[0x306]
  init = { csr_index = 0x306; }
  syntax = format("mcounteren")
  image = format("%12s", csr_index)

//==================================================================================================
// Machine Trap Handling

// Scratch register for machine trap handlers
mode MSCRATCH() = CSR[0x340]
  init = { csr_index = 0x340; }
  syntax = format("mscratch")
  image = format("%12s", csr_index)

// Machine exception program counter
mode MEPC() = CSR[0x341]
  init = { csr_index = 0x341; }
  syntax = format("mepc")
  image = format("%12s", csr_index)

// Machine trap cause
mode MCAUSE() = CSR[0x342]
  init = { csr_index = 0x342; }
  syntax = format("mcause")
  image = format("%12s", csr_index)

// Machine bad address or instruction
mode MTVAL() = CSR[0x343]
  init = { csr_index = 0x343; }
  syntax = format("mtval")
  image = format("%12s", csr_index)

// Machine interrupt pending
mode MIP() = CSR[0x344]
  init = { csr_index = 0x344; }
  syntax = format("mip")
  image = format("%12s", csr_index)

//==================================================================================================
// Addressing mode group for CSR registers
//==================================================================================================

mode CSR_MODE =
// User Trap Setup
                USTATUS
              | UIE
              | UTVEC
// User Trap Handling
              | USCRATCH
              | UEPC
              | UCAUSE
              | UTVAL
              | UIP
// User Floating-Point CSRs
              | FFLAGS
              | FRM
              | FCSR
// User Counter/Timers
              | CYCLE
              | TIME
              | INSTRET
              | HPMCOUNTER3
              | HPMCOUNTER4
              | HPMCOUNTER5
              | HPMCOUNTER6
              | HPMCOUNTER7
              | HPMCOUNTER8
              | HPMCOUNTER9
              | HPMCOUNTER10
              | HPMCOUNTER11
              | HPMCOUNTER12
              | HPMCOUNTER13
              | HPMCOUNTER14
              | HPMCOUNTER15
              | HPMCOUNTER16
              | HPMCOUNTER17
              | HPMCOUNTER18
              | HPMCOUNTER19
              | HPMCOUNTER20
              | HPMCOUNTER21
              | HPMCOUNTER22
              | HPMCOUNTER23
              | HPMCOUNTER24
              | HPMCOUNTER25
              | HPMCOUNTER26
              | HPMCOUNTER27
              | HPMCOUNTER28
              | HPMCOUNTER29
              | HPMCOUNTER30
              | HPMCOUNTER31
              | CYCLEH
              | TIMEH
              | INSTRETH
              | HPMCOUNTER3H
              | HPMCOUNTER4H
              | HPMCOUNTER5H
              | HPMCOUNTER6H
              | HPMCOUNTER7H
              | HPMCOUNTER8H
              | HPMCOUNTER9H
              | HPMCOUNTER10H
              | HPMCOUNTER11H
              | HPMCOUNTER12H
              | HPMCOUNTER13H
              | HPMCOUNTER14H
              | HPMCOUNTER15H
              | HPMCOUNTER16H
              | HPMCOUNTER17H
              | HPMCOUNTER18H
              | HPMCOUNTER19H
              | HPMCOUNTER20H
              | HPMCOUNTER21H
              | HPMCOUNTER22H
              | HPMCOUNTER23H
              | HPMCOUNTER24H
              | HPMCOUNTER25H
              | HPMCOUNTER26H
              | HPMCOUNTER27H
              | HPMCOUNTER28H
              | HPMCOUNTER29H
              | HPMCOUNTER30H
              | HPMCOUNTER31H
// Supervisor Trap Setup
              | SSTATUS
              | SEDELEG
              | SIDELEG
              | SIE
              | STVEC
              | SCOUNTEREN
// Supervisor Trap Handling
              | SSCRATCH
              | SEPC
              | SCAUSE
              | STVAL
              | SIP
// Supervisor Protection and Translation
              | SATP
// Machine Information Registers
              | MVENDORID
              | MARCHID
              | MIMPID
              | MHARTID
// Machine Trap Setup
              | MSTATUS
              | MISA
              | MEDELEG
              | MIDELEG
              | MIE
              | MTVEC
              | MCOUNTEREN
// Machine Trap Handling
              | MSCRATCH
              | MEPC
              | MCAUSE
              | MTVAL
              | MIP

//==================================================================================================
// System instructions
//==================================================================================================

/*
   Instructions (number: 10):
     ECALL
     EBREAK
     FENCE
     FENCE.I
     CSRRW
     CSRRS
     CSRRC
     CSRRWI
     CSRRSI
     CSRRCI
*/

/* The ECALL instruction is used to make a request to the supporting execution environment. */
op ecall()
  syntax = format("ecall")
  image  = format("%12s00000%3s00000%7s", "000000000000", "000", "1110011")
  action = {
    // TODO
  }

/* The EBREAK instruction is used by debuggers to cause control to be transferred back to
   a debugging environment. */
op ebreak()
  syntax = format("ebreak")
  image  = format("%12s00000%3s00000%7s", "000000000001", "000", "1110011")
  action = {
    // TODO
  }

op fence()//(pred: card(4), succ: card(4))
  // syntax = format("fence 0x%x, 0x%x", pred, succ) TODO:
  syntax = format("fence")
  image  = format("%4s%4s%4s00000%3s00000%7s", "0000", "0000", "0000", "000", "0001111")
  action = {
    // TODO
  }

op fencei()
  syntax = format("fence.i")
  image  = format("%12s00000%3s00000%7s", "000000000000", "001", "0001111")
  action = {
    // TODO
  }

/* CSRRW (Atomic Read/Write CSR) */
op csrrw(rd: X, csr: CSR_MODE, rs1: X)
  syntax = format("csrrw %s, %s, %s", rd.syntax, csr.syntax, rs1.syntax)
  image  = format("%12s%5s001%5s1110011", csr.image, rs1.image, rd.image)
  action = {
    if rd.i != 0 then
      rd = zero_extend(XWORD, csr);
    endif;
    csr = rs1;
  }

/* CSRRS (Atomic Read and Set Bits in CSR) */
op csrrs(rd: X, csr: CSR_MODE, rs1: X)
  syntax = format("csrrs %s, %s, %s", rd.syntax, csr.syntax, rs1.syntax)
  image  = format("%12s%5s010%5s1110011", csr.image, rs1.image, rd.image)
  action = {
    if rs1.i != 0 then
      csr = csr | rs1;
    endif;
    rd = zero_extend(XWORD, csr);
  }

/* CSRRC (Atomic Read and Clear Bits in CSR) */
op csrrc(rd: X, csr: CSR_MODE, rs1: X)
  syntax = format("csrrc %s, %s, %s", rd.syntax, csr.syntax, rs1.syntax)
  image  = format("%12s%5s011%5s1110011", csr.image, rs1.image, rd.image)
  action = {
    if rs1.i != 0 then
      csr = csr & ~rs1;
    endif;
    rd = zero_extend(XWORD, csr);
  }

/* The CSRRWI, CSRRSI, and CSRRCI variants are similar to CSRRW, CSRRS, and CSRRC re-
  spectively, except they update the CSR using an XLEN-bit value obtained by zero-extending a 5-bit
  unsigned immediate (uimm[4:0]) */
op csrrwi(rd: X, csr: CSR_MODE, imm: card(5))
  syntax = format("csrrwi %s, %s, 0x%x", rd.syntax, csr.syntax, imm)
  image  = format("%12s%5s101%5s1110011", csr.image, imm, rd.image)
  action = {
    if rd.i != 0 then
      rd = zero_extend(XWORD, csr);
    endif;
    csr = zero_extend(XWORD, imm);
  }

op csrrsi(rd: X, csr: CSR_MODE, imm: card(5))
  syntax = format("csrrsi %s, %s, 0x%x", rd.syntax, csr.syntax, imm)
  image  = format("%12s%5s110%5s1110011", csr.image, imm, rd.image)
  action = {
    if imm != 0 then
      csr = csr | zero_extend(XWORD, imm);
    endif;
    rd = zero_extend(XWORD, csr);
  }

op csrrci(rd: X, csr: CSR_MODE, imm: card(5))
  syntax = format("csrrci %s, %s, 0x%x", rd.syntax, csr.syntax, imm)
  image  = format("%12s%5s111%5s1110011", csr.image, imm, rd.image)
  action = {
    if imm != 0 then
      csr = csr & ~zero_extend(XWORD, imm);
    endif;
    rd = zero_extend(XWORD, csr);
  }

//==================================================================================================
// Pseudoinstructions
//==================================================================================================

// Write CSR
pseudo op csrw(csr: CSR_MODE, rs1: X)
  syntax = format("csrw %s, %s", csr.syntax, rs1.syntax)
  image  = format("%32s", csrrw(X(0), csr, rs1).image)
  action = {
    csrrw(X(0), csr, rs1).action;
  }

// Read CSR
pseudo op csrr(rd: X, csr: CSR_MODE)
  syntax = format("csrr %s, %s", rd.syntax, csr.syntax)
  image  = format("%32s", csrrs(rd, csr, X(0)).image)
  action = {
    csrrs(rd, csr, X(0)).action;
  }

// Set bits in CSR
pseudo op csrs(csr: CSR_MODE, rs1: X)
  syntax = format("csrs %s, %s", csr.syntax, rs1.syntax)
  image  = format("%32s", csrrs(X(0), csr, rs1).image)
  action = {
    csrrs(X(0), csr, rs1).action;
  }

// Clear bits in CSR
pseudo op csrc(csr: CSR_MODE, rs1: X)
  syntax = format("csrc %s, %s", csr.syntax, rs1.syntax)
  image  = format("%32s", csrrc(X(0), csr, rs1).image)
  action = {
    csrrc(X(0), csr, rs1).action;
  }

// Write CSR, immediate
pseudo op csrwi(csr: CSR_MODE, imm: card(5))
  syntax = format("csrwi %s, 0x%x", csr.syntax, imm)
  image  = format("%32s", csrrwi(X(0), csr, imm).image)
  action = {
    csrrwi(X(0), csr, imm).action;
  }

// Set bits in CSR, immediate
pseudo op csrsi(csr: CSR_MODE, imm: card(5))
  syntax = format("csrsi %s, 0x%x", csr.syntax, imm)
  image  = format("%32s", csrrsi(X(0), csr, imm).image)
  action = {
    csrrsi(X(0), csr, imm).action;
  }

// Clear bits in CSR, immediate
pseudo op csrci(csr: CSR_MODE, imm: card(5))
  syntax = format("csrci %s, 0x%x", csr.syntax, imm)
  image  = format("%32s", csrrci(X(0), csr, imm).image)
  action = {
    csrrci(X(0), csr, imm).action;
  }

// Read FP control/status register
pseudo op frcsr(rd: X)
  syntax = format("frcsr %s", rd.syntax)
  image  = format("%32s", csrrs(rd, FCSR(), X(0)).image)
  action = {
    csrrs(rd, FCSR(), X(0)).action;
  }

// Swap FP control/status register
pseudo op fscsr(rd: X, rs: X)
  syntax = format("fscsr %s, %s", rd.syntax, rs.syntax)
  image  = format("%32s", csrrw(rd, FCSR(), rs).image)
  action = {
    csrrw(rd, FCSR(), rs).action;
  }

// Write FP control/status register
pseudo op fscsr2(rs: X)
  syntax = format("fscsr %s", rs.syntax)
  image  = format("%32s", csrrw(X(0), FCSR(), rs).image)
  action = {
    csrrw(X(0), FCSR(), rs).action;
  }

// Read FP rounding mode
pseudo op frrm(rd: X)
  syntax = format("frrm %s", rd.syntax)
  image  = format("%32s", csrrs(rd, FRM(), X(0)).image)
  action = {
    csrrs(rd, FRM(), X(0)).action;
  }

// Swap FP rounding mode
pseudo op fsrm(rd: X, rs: X)
  syntax = format("fsrm %s, %s", rd.syntax, rs.syntax)
  image  = format("%32s", csrrw(rd, FRM(), rs).image)
  action = {
    csrrw(rd, FRM(), rs).action;
  }

// Write FP rounding mode
pseudo op fsrm2(rs: X)
  syntax = format("fsrm %s", rs.syntax)
  image  = format("%32s", csrrw(X(0), FRM(), rs).image)
  action = {
    csrrw(X(0), FRM(), rs).action;
  }

// Swap FP rounding mode, immediate
pseudo op fsrmi(rd: X, imm: card(5))
  syntax = format("fsrmi %s, 0x%x", rd.syntax, imm)
  image  = format("%32s", csrrwi(rd, FRM(), imm).image)
  action = {
    csrrwi(rd, FRM(), imm).action;
  }

// Write FP rounding mode, immediate
pseudo op fsrmi2(imm: card(5))
  syntax = format("fsrmi 0x%x", imm)
  image  = format("%32s", csrrwi(X(0), FRM(), imm).image)
  action = {
    csrrwi(X(0), FRM(), imm).action;
  }

// Read FP exception flags
pseudo op frflags(rd: X)
  syntax = format("frflags %s", rd.syntax)
  image  = format("%32s", csrrs(rd, FFLAGS(), X(0)).image)
  action = {
    csrrs(rd, FFLAGS(), X(0)).action;
  }

// Swap FP exception flags
pseudo op fsflags(rd: X, rs: X)
  syntax = format("fsflags %s, %s", rd.syntax, rs.syntax)
  image  = format("%32s", csrrw(rd, FFLAGS(), rs).image)
  action = {
    csrrw(rd, FFLAGS(), rs).action;
  }

// Write FP exception flags
pseudo op fsflags2(rs: X)
  syntax = format("fsflags %s", rs.syntax)
  image  = format("%32s", csrrw(X(0), FFLAGS(), rs).image)
  action = {
    csrrw(X(0), FFLAGS(), rs).action;
  }

// Swap FP exception flags, immediate
pseudo op fsflagsi(rd: X, imm: card(5))
  syntax = format("fsflagsi %s, 0x%x", rd.syntax, imm)
  image  = format("%32s", csrrwi(rd, FFLAGS(), imm).image)
  action = {
    csrrwi(rd, FFLAGS(), imm).action;
  }

// Write FP exception flags, immediate
pseudo op fsflagsi2(imm: card(5))
  syntax = format("fsflagsi 0x%x", imm)
  image  = format("%32s", csrrwi(X(0), FFLAGS(), imm).image)
  action = {
    csrrwi(X(0), FFLAGS(), imm).action;
  }

/*
rdinstret[h] rd csrrs rd, instret[h], x0 Read instructions-retired counter
rdcycle[h] rd csrrs rd, cycle[h], x0 Read cycle counter
rdtime[h] rd csrrs rd, time[h], x0 Read real-time clock
*/

//==================================================================================================
// Instruction Groups
//==================================================================================================

op rv32i_system = csrrw
                | csrrs
                | csrrc
                | csrrwi
                | csrrsi
                | csrrci
                | ecall
                | ebreak
                | fence
                | fencei

op rv32i_pseudo_system = csrw
                       | csrr
                       | csrs
                       | csrc
                       | csrwi
                       | csrsi
                       | csrci
                       | frcsr
                       | fscsr
                       | fscsr2
                       | frrm
                       | fsrm
                       | fsrm2
                       | fsrmi
                       | fsrmi2
                       | frflags
                       | fsflags
                       | fsflags2
                       | fsflagsi
                       | fsflagsi2

op rv32i_sys = rv32i_system // 10
             | rv32i_pseudo_system // 20

#endif
