/*
 * Copyright 2017 ISP RAS (http://www.ispras.ru)
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */

#ifndef RISCV_RV32I_INCLUDED
#define RISCV_RV32I_INCLUDED

//==================================================================================================
// RV32I Instructions
//==================================================================================================

/*
  Instructions:
    LUI +
    AUIPC +
    JAL
    JALR
    BEQ
    BNE
    BLT
    BGE
    BLTU
    BGEU
    LB
    LH
    LW
    LBU
    LHU
    SB
    SH
    SW
    ADDI +
    SLTI +
    SLTIU +
    XORI
    ORI
    ANDI
    SLLI
    SRLI
    SRAI
    ADD
    SUB
    SLL
    SLT
    SLTU
    XOR
    SRL
    SRA
    OR
    AND
    FENCE
    FENCE.I
    ECALL
    EBREAK
    CSRRW
    CSRRS
    CSRRC
    CSRRWI
    CSRRSI
    CSRRCI
*/

/*
  LUI : Load Upper Immediate (U-type)

  Format: lui rd, imm

  RV32I:

  LUI (load upper immediate) is used to build 32-bit constants and uses the U-type
  format. LUI places the U-immediate value in the top 20 bits of the destination
  register rd, filling in the lowest 12 bits with zeros.

  RV64I:

  LUI (load upper immediate) uses the same opcode as RV32I. LUI places the 20-bit
  U-immediate into bits 31–12 of register rd and places zero in the lowest 12 bits.
  The 32-bit result is sign-extended to 64 bits.
*/
op lui(rd: X, imm: card(20))
  syntax = format("lui %s, 0x%x", rd.syntax, imm)
  image  = format("%20s%s0110111", imm, rd.image)
  action = {
    rd = sign_extend(XWORD, imm) << 12;
  }

/*
  AUIPC : Add Upper Immediate to PC (U-type)

  Format: auipc rd, imm

  RV32I:

  AUIPC (add upper immediate to pc) is used to build pc-relative addresses and uses
  the U-type format. AUIPC forms a 32-bit offset from the 20-bit U-immediate, filing
  in the lowest 12 bits with zeros, adds this offset to the pc, then places the result
  in register rd.

  RV64I:

  AUIPC (add upper immediate to pc) uses the same opcode as RV32I. AUIPC is used to
  build pc-relative addresses and uses the U-type format. AUIPC appends 12 low-order
  zero bits to the 20-bit U-immediate, sign-extends the result to 64 bits, then adds
  it to the pc and places the result in register rd.
*/
op auipc(rd: X, imm: card(20))
  syntax = format("auipcs %s, 0x%x", rd.syntax, imm)
  image  = format("%20s%s0010111", imm, rd.image)
  action = {
    rd = PC + (sign_extend(XWORD, imm) << 12);
  }

/*
  ADDI: Add Immediate (I-type)

  Format: addi rd, rs1, imm

  ADDI adds the sign-extended 12-bit immediate to register rs1. Arithmetic overﬂow is
  ignored and the result is simply the low XLEN bits of the result. ADDI rd, rs1, 0
  is used to implement the MV rd, rs1 assembler pseudo-instruction.
*/
op addi(rd: X, rs1: X, imm: card(12))
  syntax = format("addi %s, %s, 0x%x", rd.syntax, rs1.syntax, imm)
  image  = format("%12s%s000%s0010011", imm, rs1.image, rd.image)
  action = {
    rd = rs1 + sign_extend(XWORD, imm);
  }

/*
  SLTI: Set Less Than Immediate (I-type)

  Format: slti rd, rs1, imm

  SLTI (set less than immediate) places the value 1 in register rd if register rs1 is
  less than the sign-extended immediate when both are treated as signed numbers,
  else 0 is written to rd.
*/
op slti(rd: X, rs1: X, imm: card(12))
  syntax = format("slti %s, %s, 0x%x", rd.syntax, rs1.syntax, imm)
  image  = format("%12s%s010%s0010011", imm, rs1.image, rd.image)
  action = {
    if cast(XINT, rs1) < sign_extend(XINT, imm) then
      rd = 1;
    else
      rd = 0;
    endif;
  }

/*
  SLTIU: Set Less Than Immediate Unsigned (I-type)

  Format: sltiu rd, rs1, imm

  SLTIU is similar to SLTI but compares the values as unsigned numbers (i.e.,
  the immediate is first sign-extended to XLEN bits then treated as an unsigned number).
  Note, SLTIU rd, rs1, 1 sets rd to 1 if rs1 equals zero, otherwise sets rd to 0
  (assembler pseudo-op SEQZ rd, rs).
*/
op sltiu(rd: X, rs1: X, imm: card(12))
  syntax = format("sltiu %s, %s, 0x%x", rd.syntax, rs1.syntax, imm)
  image  = format("%12s%s011%s0010011", imm, rs1.image, rd.image)
  action = {
    if rs1 < sign_extend(XWORD, imm) then
      rd = 1;
    else
      rd = 0;
    endif;
  }

//==================================================================================================

op rv32i = lui
         | auipc
/*
         | jal
         | jalr
         | beq
         | bne
         | blt
         | bge
         | bltu
         | bgeu
         | lb
         | lh
         | lw
         | lbu
         | lhu
         | sb
         | sh
         | sw
*/
         | addi
         | slti
         | sltiu
/*
         | xori
         | ori
         | andi
         | slli
         | srli
         | srai
         | add
         | sub
         | sll
         | slt
         | sltu
         | xor
         | srl
         | sra
         | or
         | and
         | fence
         | fence.i
         | ecall
         | ebreak
         | csrrw
         | csrrs
         | csrrc
         | csrrwi
         | csrrsi
         | csrrci
*/

//==================================================================================================
// The End
//==================================================================================================

#endif

