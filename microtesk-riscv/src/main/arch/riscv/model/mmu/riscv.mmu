/*
 * Copyright 2018-2019 ISP RAS (http://www.ispras.ru)
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */

// Sv32:
// Sv64: null

let TRUE = 1
let FALSE = 0

#ifdef RV64I
  let XLEN = 64
#else
  let XLEN = 32
#endif

/* For RV32, four CSRs, pmpcfg0{pmpcfg3, hold the configurations pmp0cfg-pmp15cfg for the 16 PMP
entries. PMPCFGx = {pmp(x*4+3)cfg, pmp(x*4+2)cfg, pmp(x*4+1)cfg, pmp(x*4+0)cfg}
Physical Memory Protection (PMP) entries are described by an 8-bit configuration register and one
MXLEN-bit address register.
*/
// For RV32: 32-bit
extern PMPCFG0 = PMPCFG0 // pmp3cfg pmp2cfg pmp1cfg pmp0cfg
extern PMPCFG2 = PMPCFG2

// Only for RV32
extern PMPCFG1 = PMPCFG1
extern PMPCFG3 = PMPCFG3

// Supervisor address translation and protection
extern SATP = SATP
// The physical page number of the root page table is stored in the satp register's PPN field.
extern SATP_PPN = SATP_PPN // RV32: 22-bit / RV64: 44-bit

// For Sv32, PAGESIZE=2^12 and LEVELS=2
let PAGESIZE = 2 ** 12
#ifdef RV32FULL
  let LEVELS   = 2
#else
  #ifdef RV64Sv39
    let LEVELS   = 3
  #else
    // Sv48
    let LEVELS   = 4
  #endif
#endif

// For Sv32, PTESIZE=4
#ifdef RV32FULL
  let PTESIZE = 4
#else
  // Sv39, Sv 48
  let PTESIZE = 8
#endif

// Sv32 page tables consist of 2x10 page-table entries (PTEs), each of four bytes.
#ifdef RV32FULL
  let PTE_SIZE = 2**10
#else
  #ifdef RV64FULLSV39
    let PTE_SIZE = 2**9
  #else
    // Sv48
  #endif
#endif

//==================================================================================================
// Address Types
//==================================================================================================

// TODO: let VA_BITS = 32

struct VASv39 (
  vpn2   : 9, // 38..30
  vpn1   : 9, // 29..21
  vpn0   : 9, // 20..12
  offset : 12 // 11..0
)

struct PASv39 (
  ppn2   : 26, // 55..30
  ppn1   : 9,  // 29..21
  ppn0   : 9,  // 20..12
  offset : 12  // 11..0
)

// Sv32 virtual address.
struct VASv32 (
  vpn1   : 10, // 31..22
  vpn0   : 10, // 21..12
  offset : 12  // 11..0
)

address VA(
  value: 32
)

// Sv32 physical address.
struct PASv32 (
  ppn1   : 12, // 33..22
  ppn0   : 10, // 21..12
  offset : 12,  // 11..0
  error  : 1
)

address PA(
  value: 34
)

//==================================================================================================
// Translation Buffers
//==================================================================================================

// Sv32 Page Table Entry
memory buffer PT (va: VA)
  ways = 1
  sets = PTE_SIZE
  entry  = (ppn1: 12, ppn0: 10, rsw: 2, d: 1, a: 1, g: 1, u: 1, x: 1, w: 1, r: 1, v: 1)
  index  = 0
  match  = 0
  policy = NONE

/* The V bit indicates whether the PTE is valid; if it is 0, all other bits in the PTE are
don't-cares and may be used freely by software.
   R, W, and X, indicate whether the page is readable, writable, and executable, respectively.
   The RSW field is reserved for use by supervisor software; the implementation shall ignore this
field.
*/

//==================================================================================================
// Translate Address
//==================================================================================================

function SV32Translate (va: VA, store_op: 1): PASv32
  var pte: PT.entry;
  var i: 4;
  var a: 32;
  var temp_address: VA;
  var pa: PASv32;
  var error: 1;

  var d: 1;
  var accessed: 1; // a
  var g: 1;
  var u: 1;
  var x: 1;
  var w: 1;
  var r: 1;
  var v: 1;

  var temp: 32;
  {
    error = 0;

    // Step 1
    temp<21..0> = SATP_PPN;
    a = temp * PAGESIZE;
    i = LEVELS - 1;

    // Step 2
    temp_address = a + va.value<31..22> * PTESIZE; //va.vpn1 * PTESIZE;

    if PT(temp_address).hit then
    // The address hits PT
      pte = PT(temp_address);

      if pte.r == TRUE || pte.x == TRUE then
        error = TRUE;
        // TODO:
      endif;
    else
      pte = PT(temp_address);
      temp<21..0> = pte.ppn1::pte.ppn0;
      a = temp * PAGESIZE;

      temp_address = a + va.value<21..12> * PTESIZE; //va.vpn0 * PTESIZE;
      if PT(temp_address).hit then
        pte = PT(temp_address);
        // TODO:
      else
      // The address does not hit the PT
        error = TRUE;
        exception("PT Miss");
        // TODO:
      endif;
    endif;
    // If the address hits the PT

    d = pte.d;
    accessed = pte.a;
    g = pte.g;
    u = pte.u;
    x = pte.x;
    w = pte.w;
    r = pte.r;
    v = pte.v;

    // Step 3
    // if v == FALSE || (r == FALSE && w == TRUE) then
    if v == FALSE then
      error = TRUE;
      exception("SV32Translate: page-fault exception");
    endif;
    if r == FALSE && w == TRUE then
      error = TRUE;
      exception("SV32Translate: page-fault exception");
    endif;

    //if pte.a == FALSE || store_op == TRUE && pte.d == FALSE then
    if pte.a == FALSE then
      error = TRUE;
      exception("SV32Translate: page-fault exception");
    endif;
    if store_op == TRUE && pte.d == FALSE then
      error = TRUE;
      exception("SV32Translate: page-fault exception");
    endif;

    // Update PT.
    PT(temp_address) = pte; // TODO: !

    pa.ppn1   = pte.ppn1;
    pa.ppn0   = pte.ppn0;
    pa.offset = va<11..0>;
    pa.error  = error;

    return pa;
  }

function TranslateAddress(va: VA, store_op: 1): PA
  var pa: PASv32;
  var pAddress: PA;
  {
    pa = SV32Translate(va, store_op);
    pAddress = pa.ppn1::pa.ppn0::pa.offset;

    //if SV32Translate(va, store_op).hit then
    //  pa = SV32Translate(va, store_op);
    if pa.error == 0 then
      trace("SV32Translate: va=%x, pa=%x", va.value, pa.ppn1::pa.ppn0::pa.offset);
      // va.value = va.vpn1::va.vpn0::va.offset
    else
      trace("ERROR: va=%x, pa=%x", va.value, pa.ppn1::pa.ppn0::pa.offset);
    endif;

    return pAddress;
  }

//==================================================================================================
// Main Memory
//==================================================================================================

// A word of memory is defined as 32 bits (4 bytes).
let DATA_SIZE = 32

// A RISC-V hart has a single byte-addressable address space of 2XLEN bytes for all memory accesses.
// TODO: extern
// Memory Size
let MEM_SIZE = XLEN - 2
// Memory Size is 2 ** XLEN Bytes
let MEM_SIZE_IN_WORDS = 2 ** (MEM_SIZE)

buffer MEM (pa: PA)
  // Direct-mapped buffer.
  ways  = 1
  sets  = MEM_SIZE_IN_WORDS
  entry = (DATA: DATA_SIZE)
  index = pa.value<33..4>
  match = 0

//==================================================================================================
// Memory Management Unit
//==================================================================================================

mmu memory (va: VA) = (data: DATA_SIZE)
  var pa: PA;
  read = {
    pa = TranslateAddress(va, 0);
    data = MEM(pa);
  }

  write = {
    pa = TranslateAddress(va, 1);
    MEM(pa) = data;
  }

//==================================================================================================
// The End
//==================================================================================================
