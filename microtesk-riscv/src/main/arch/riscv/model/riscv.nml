/*
 * MicroTESK for RISC-V
 *
 * Copyright (c) 2017 Institute for System Programming of the Russian Academy of Sciences
 * All Rights Reserved
 *
 * Institute for System Programming of the Russian Academy of Sciences (ISP RAS)
 * 25 Alexander Solzhenitsyn st., Moscow, 109004, Russia
 * http://www.ispras.ru
 */

//==================================================================================================
// Types
//==================================================================================================

// Unsigned Types
type   BIT = card(1)
type  BYTE = card(8)
type HWORD = card(16)
type  WORD = card(32)
type DWORD = card(64)
type QWORD = card(128)

// Signed Types
type SHORT = int(16)
type INT   = int(32)
type LONG  = int(64)

// Floating Point Types
type FLOAT32  = float(23, 8)
type FLOAT64  = float(52, 11)

//==================================================================================================
// Registers and Memory
//==================================================================================================

// Program Counter
let PC = "CIA"
reg CIA [DWORD]

// Branch Processing Variables
mem BRANCH [BIT]
mem SKIPOP [BIT]
mem NEXTPC [DWORD]

// General Purpose Registers
reg GPR [32, WORD]

var gpr_reg_number [card(5)]
mode R (i: card(5)) = GPR[i]
  syntax = format("x%d", i)
  image  = format("%5s", i)
  action = {gpr_reg_number = i;}

// Floating Point (Coprocessor unit 1), general register. MIPS 64
reg FPR [32, DWORD]

mode FR (i: card(5)) = FPR[i]
  syntax = format("f%d", i)
  image  = format("%5s", i)

// Main Memory
mem MEM [2 ** 30, WORD] // 2 * 32 , BYTE

//==================================================================================================
// Fields of Instruction formats
//==================================================================================================

var OPCD [card(6)]

//==================================================================================================
// Variables
//==================================================================================================

var temp_bit [BIT]
var temp6    [card(6)]
var temp32   [WORD]
var temp64   [DWORD]
var temp_int    [INT]
var temp_long    [LONG]

var temp_fp_s  [FLOAT32]
var temp_fp_d  [FLOAT64]
var temp128   [QWORD]

//==================================================================================================
// Instructions
//==================================================================================================

#include "riscv_alu.nml"
#include "riscv_bpu.nml"
#include "riscv_mmu.nml"
#include "riscv_nop.nml"
#include "riscv_sys.nml"
#include "riscv_fpu.nml"

op Op = RISCVAluOp
   //   | RISCVBpuOp
    //  | RISCVMmuOp
      | RISCVNopOp
//      | RISCVSysOp
//      | RISCVFpuOp

op instruction (operation: Op)
  syntax = operation.syntax
  image  = operation.image
  action = {
    //GPR[0] = coerce(DWORD, 0);

    BRANCH = 0;
    NEXTPC = coerce(WORD, 0);

    if SKIPOP == 0 then
      operation.action;
    else
      SKIPOP = 0; // still unpredicted for branches etc.
    endif;

    if (BRANCH == 1) then
      CIA = NEXTPC;
    else
      CIA = CIA + 4;
    endif;
  }

//==================================================================================================
// The End
//==================================================================================================
