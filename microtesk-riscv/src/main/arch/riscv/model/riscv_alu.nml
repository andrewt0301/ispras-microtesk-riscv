/*
 * MicroTESK for RISC-V
 *
 * Copyright (c) 2016-2017 Institute for System Programming of the Russian Academy of Sciences
 * All Rights Reserved
 *
 * Institute for System Programming of the Russian Academy of Sciences (ISP RAS)
 * 25 Alexander Solzhenitsyn st., Moscow, 109004, Russia
 * http://www.ispras.ru
 */

#ifndef RISCV_ALU_INCLUDED
#define RISCV_ALU_INCLUDED

//==================================================================================================
// ALU Instructions
//==================================================================================================

//--------------------------------------------------------------------------------------------------
// RISC-V Arithmetic
//--------------------------------------------------------------------------------------------------

/*
  Instructions:
    ADD +
*/

/* ADD
  ADD and SUB perform addition and subtraction respectively. Overflows are ignored and
  the low XLEN bits of results are written to the destination.
*/
op add (rd: R, rs1: R, rs2: R)
  init = {}
  syntax = format("add %s, %s, %s", rd.syntax, rs1.syntax, rs2.syntax)
  image  = format("0000000%5s%5s000%5s0110011", rs2.image, rs1.image, rd.image)
  action = {
    rd = rs1 + rs2;
  }

/* SUB */
op sub (rd: R, rs1: R, rs2: R)
  init = {}
  syntax = format("sub %s, %s, %s", rd.syntax, rs1.syntax, rs2.syntax)
  image  = format("0100000%5s%5s000%5s0110011", rs2.image, rs1.image, rd.image)
  action = {
    rd = rs1 - rs2;
  }

/* ADDI
  ADDI adds the sign-extended 12-bit immediate to register rs1. Arithmetic overflow is ignored and
  the result is simply the low XLEN bits of the result. ADDI rd, rs1, 0 is used to implement the
  MV rd, rs1 assembler pseudo-instruction.
*/
op addi (rd: R, rs1: R, imm12: card(12))
  init = {}
  syntax = format("addi %s, %s, %d", rd.syntax, rs1.syntax, imm12)
  image  = format("%12s%5s000%5s0010011", imm12, rs1.image, rd.image)
  action = {
    temp32 = sign_extend(WORD, imm12);
    rd = rs1 + temp32;
  }

/* SLTI
  SLTI (set less than immediate) places the value 1 in register rd if register rs1 is less than the
  signextended immediate when both are treated as signed numbers, else 0 is written to rd.
*/

op RISCVArithmetic = add
                   | sub
                   | addi

op RISCVAluOp = RISCVArithmetic

//==================================================================================================
// The End
//==================================================================================================

#endif
