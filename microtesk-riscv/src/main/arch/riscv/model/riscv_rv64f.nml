/*
 * Copyright 2017 ISP RAS (http://www.ispras.ru)
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */

#ifndef RISCV_RV64F_INCLUDED
#define RISCV_RV64F_INCLUDED

//==================================================================================================
// RV64F Standard Extension (in addition to RV32F)
//==================================================================================================

/*
  Instructions (number: 4):
    FCVT.L.S
    FCVT.LU.S
    FCVT.S.L
    FCVT.S.LU
*/

op fcvt_l_s(rd: X, rs1: F, op_round_mod: card(3))
  syntax = format("fcvt.l.s %s, %s", rd.syntax, rs1.syntax)
  image  = format("1100000%5s%5s%3s%5s1010011", "00010", rs1.image, op_round_mod, rd.image)
  action = {
    //coerce(card(3), RM_RNE)
    tmp_ui3 = float_rounding_mode;
    setSFRoundingMode(op_round_mod).action;

    rd = float_to_int(DWORD, rs1);

    float_rounding_mode = tmp_ui3; // return the original value
  }

// TODO:
op fcvt_l_s2(rd: X, rs1: F)
  syntax = format("%s", fcvt_l_s(rd, rs1, coerce(card(3), RM_RTZ)).syntax)
  image  = format("%32s", fcvt_l_s(rd, rs1, coerce(card(3), RM_RTZ)).image)
  action = {
    fcvt_l_s(rd, rs1, coerce(card(3), RM_RTZ)).action;
  }

op fcvt_lu_s(rd: X, rs1: F, op_round_mod: card(3))
  syntax = format("fcvt.lu.s %s, %s", rd.syntax, rs1.syntax)
  image  = format("1100000%5s%5s%3s%5s1010011", "00011", rs1.image, op_round_mod, rd.image)
  action = {
    //coerce(card(3), RM_RNE)
    tmp_ui3 = float_rounding_mode;
    setSFRoundingMode(op_round_mod).action;

    rd = float_to_int(DWORD, rs1);

    float_rounding_mode = tmp_ui3; // return the original value
  }

// TODO:
op fcvt_lu_s2(rd: X, rs1: F)
  syntax = format("%s", fcvt_lu_s(rd, rs1, coerce(card(3), RM_RTZ)).syntax)
  image  = format("%32s", fcvt_lu_s(rd, rs1, coerce(card(3), RM_RTZ)).image)
  action = {
    fcvt_lu_s(rd, rs1, coerce(card(3), RM_RTZ)).action;
  }

op fcvt_s_l(rd: F, rs1: X)
  syntax = format("fcvt.s.l %s, %s", rd.syntax, rs1.syntax)
  image  = format("1101000%5s%5s%3s%5s1010011", "00010", rs1.image, coerce(card(3), RM_RNE), rd.image)
  action = {
    rd = -1;
    temp_fps = int_to_float(FLOAT32, rs1<63..0>);
    rd<31..0> = temp_fps<31..0>;
  }

op fcvt_s_lu(rd: F, rs1: X)
  syntax = format("fcvt.s.lu %s, %s", rd.syntax, rs1.syntax)
  image  = format("1101000%5s%5s%3s%5s1010011", "00011", rs1.image, coerce(card(3), RM_RNE), rd.image)
  action = {
  // TODO:
    tmp_word = 0;
    temp_fps = int_to_float(FLOAT32, tmp_word);
    if rs1<63> == 1 then
      tmp_dword<62> = 1;
      temp_fps = int_to_float(FLOAT32, tmp_dword<63..0>);
      temp_fps = temp_fps + temp_fps;
    endif;
  //

    tmp_dword = 0;
    tmp_dword<62..0> = rs1<62..0>;

    temp_fps2 = int_to_float(FLOAT32, tmp_dword<63..0>);
    temp_fps = temp_fps + temp_fps2;

    rd = -1;
    rd<31..0> = temp_fps<31..0>;
  }

//==================================================================================================
// Instruction Groups
//==================================================================================================

op rv64f = fcvt_l_s
         | fcvt_lu_s
         | fcvt_l_s2 // TODO:
         | fcvt_lu_s2 // TODO:
         | fcvt_s_l
         | fcvt_s_lu

//==================================================================================================
// The End
//==================================================================================================

#endif
