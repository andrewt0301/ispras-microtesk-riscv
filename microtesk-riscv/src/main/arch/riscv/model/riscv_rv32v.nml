/*
 * Copyright 2018 ISP RAS (http://www.ispras.ru)
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */

#ifndef RISCV_RV32V_INCLUDED
#define RISCV_RV32V_INCLUDED

//==================================================================================================
// RV32V Standard Extension Instruction Set
//==================================================================================================

/*
  Instructions (number: 56):
    VADD
    VSUB
    VSL
    VSR
    VAND
    VOR
    VXOR
    VSEQ
    VSNE
    VSLT
    VSGE
    VCLIP
    VCVT
    VMPOP
    VMFIRST
    VEXTRACT
    VINSERT
    VMERGE
    VSELECT
    VSLIDE
    VDIV
    VREM
    VMUL
    VMULH
    VMIN
    VMAX
    VSGNJ
    VSGNJN
    VSGNJX
    VSQRT
    VCLASS
    VPOPC
    VADDI
    VSLI
    VSRI
    VANDI
    VORI
    VXORI
    VCLIPI
    VMADD
    VMSUB
    VNMADD
    VNMSUB
    VLD
    VLDS
    VLDX
    VST
    VSTS
    VSTX
    VAMOSWAP
    VAMOADD
    VAMOAND
    VAMOOR
    VAMOXOR
    VAMOMIN
    VAMOMAX
*/

//==================================================================================================
// Instruction Templates
//==================================================================================================

/*
VR-type:

op <name>(vd: X, vs1: X, vs2: X)
  syntax = format("<name> %s, %s, %s", vd.syntax, vs1.syntax, vs2.syntax)
  image  = format("<func7>%5s%5s<funct2><vp>%5s<opcode>", vs2.image, vs1.image, vd.image)
  action = {
    // TODO
  }

VR4-type:

op <name>(vd: X, vs1: X, vs2: X, vs3: X)
  syntax = format("<name> %s, %s, %s", vd.syntax, vs1.syntax, vs2.syntax, vs3.syntax)
  image  = format("%3s<fmt>%5s%5s<funct2><vp>%5s<opcode>", vs3.image, vs2.image, vs1.image, vd.image)
  action = {
    // TODO
  }
*/

var funct2[card(2)]
var func7_0[card(4)]
var func7_1[card(3)]
var vp[BIT]
var vs2_const[card(5)]

var m[card(2)]
var im_2b[card(2)]

//==================================================================================================
// Registers
//==================================================================================================

//32 vector registers each with 16-bit vtypen field
reg VREG [32, HWORD]

mode VR (i: card(5)) = VREG [i]
  syntax = format("v%d", i)
  image  = format("%5s", i)

//==================================================================================================
// Instructions
//==================================================================================================

let RV32V_SE   = 0b1100111 // RV32V Standard Extension
let RV32V_SEC1 = 0b0000111 // RV32V Standard Extension (cont.) type 1
let RV32V_SEC2 = 0b0100111 // RV32V Standard Extension (cont.) type 2

op vadd(vd: VR, vs1: VR, vs2: VR)
  init = {
    func7_0 = 0b1000;
    func7_1 = 0b000;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vadd %s, %s, %s", vd.syntax, vs1.syntax, vs2.syntax)
  image  = format("%4s%3s%5s%5s%1s%2s%5s%7s",
                 func7_0, func7_1, vs2.image, vs1.image, vp, m, vd.image, coerce(card(7), RV32V_SE))
  action = {
    // TODO:
  }

op vsub(vd: VR, vs1: VR, vs2: VR)
  init = {
    func7_0 = 0b1000;
    func7_1 = 0b001;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vsub %s, %s, %s", vd.syntax, vs1.syntax, vs2.syntax)
  image  = format("%4s%3s%5s%5s%1s%2s%5s%7s",
                 func7_0, func7_1, vs2.image, vs1.image, vp, m, vd.image, coerce(card(7), RV32V_SE))
  action = {
    // TODO:
  }

op vsl(vd: VR, vs1: VR, vs2: VR)
  init = {
    func7_0 = 0b1001;
    func7_1 = 0b000;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vsl %s, %s, %s", vd.syntax, vs1.syntax, vs2.syntax)
  image  = format("%4s%3s%5s%5s%1s%2s%5s%7s",
                 func7_0, func7_1, vs2.image, vs1.image, vp, m, vd.image, coerce(card(7), RV32V_SE))
  action = {
    // TODO:
  }

op vsr(vd: VR, vs1: VR, vs2: VR)
  init = {
    func7_0 = 0b1101;
    func7_1 = 0b000;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vsr %s, %s, %s", vd.syntax, vs1.syntax, vs2.syntax)
  image  = format("%4s%3s%5s%5s%1s%2s%5s%7s",
                 func7_0, func7_1, vs2.image, vs1.image, vp, m, vd.image, coerce(card(7), RV32V_SE))
  action = {
    // TODO:
  }

op vand(vd: VR, vs1: VR, vs2: VR)
  init = {
    func7_0 = 0b1111;
    func7_1 = 0b000;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vand %s, %s, %s", vd.syntax, vs1.syntax, vs2.syntax)
  image  = format("%4s%3s%5s%5s%1s%2s%5s%7s",
                 func7_0, func7_1, vs2.image, vs1.image, vp, m, vd.image, coerce(card(7), RV32V_SE))
  action = {
    // TODO:
  }

op vor(vd: VR, vs1: VR, vs2: VR)
  init = {
    func7_0 = 0b1110;
    func7_1 = 0b000;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vor %s, %s, %s", vd.syntax, vs1.syntax, vs2.syntax)
  image  = format("%4s%3s%5s%5s%1s%2s%5s%7s",
                 func7_0, func7_1, vs2.image, vs1.image, vp, m, vd.image, coerce(card(7), RV32V_SE))
  action = {
    // TODO:
  }

op vxor(vd: VR, vs1: VR, vs2: VR)
  init = {
    func7_0 = 0b1100;
    func7_1 = 0b000;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vxor %s, %s, %s", vd.syntax, vs1.syntax, vs2.syntax)
  image  = format("%4s%3s%5s%5s%1s%2s%5s%7s",
                 func7_0, func7_1, vs2.image, vs1.image, vp, m, vd.image, coerce(card(7), RV32V_SE))
  action = {
    // TODO:
  }

op vseq(vd: VR, vs1: VR, vs2: VR)
  init = {
    func7_0 = 0b1001;
    func7_1 = 0b100;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vseq %s, %s, %s", vd.syntax, vs1.syntax, vs2.syntax)
  image  = format("%4s%3s%5s%5s%1s%2s%5s%7s",
                 func7_0, func7_1, vs2.image, vs1.image, vp, m, vd.image, coerce(card(7), RV32V_SE))
  action = {
    // TODO:
  }

op vsne(vd: VR, vs1: VR, vs2: VR)
  init = {
    func7_0 = 0b1001;
    func7_1 = 0b101;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vsne %s, %s, %s", vd.syntax, vs1.syntax, vs2.syntax)
  image  = format("%4s%3s%5s%5s%1s%2s%5s%7s",
                 func7_0, func7_1, vs2.image, vs1.image, vp, m, vd.image, coerce(card(7), RV32V_SE))
  action = {
    // TODO:
  }

op vslt(vd: VR, vs1: VR, vs2: VR)
  init = {
    func7_0 = 0b1001;
    func7_1 = 0b110;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vslt %s, %s, %s", vd.syntax, vs1.syntax, vs2.syntax)
  image  = format("%4s%3s%5s%5s%1s%2s%5s%7s",
                 func7_0, func7_1, vs2.image, vs1.image, vp, m, vd.image, coerce(card(7), RV32V_SE))
  action = {
    // TODO:
  }

op vsge(vd: VR, vs1: VR, vs2: VR)
  init = {
    func7_0 = 0b1001;
    func7_1 = 0b111;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vsge %s, %s, %s", vd.syntax, vs1.syntax, vs2.syntax)
  image  = format("%4s%3s%5s%5s%1s%2s%5s%7s",
                 func7_0, func7_1, vs2.image, vs1.image, vp, m, vd.image, coerce(card(7), RV32V_SE))
  action = {
    // TODO:
  }

op vclip(vd: VR, vs1: VR, rs2: X)
  init = {
    func7_0 = 0b1011;
    func7_1 = 0b000;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vclip %s, %s, %s", vd.syntax, vs1.syntax, rs2.syntax)
  image  = format("%4s%3s%5s%5s%1s%2s%5s%7s",
                 func7_0, func7_1, rs2.image, vs1.image, vp, m, vd.image, coerce(card(7), RV32V_SE))
  action = {
    // TODO:
  }

op vcvt(vd: VR, vs1: VR, rs2: X)
  init = {
    func7_0 = 0b1011;
    func7_1 = 0b001;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vcvt %s, %s, %s", vd.syntax, vs1.syntax, rs2.syntax)
  image  = format("%4s%3s%5s%5s%1s%2s%5s%7s",
                 func7_0, func7_1, rs2.image, vs1.image, vp, m, vd.image, coerce(card(7), RV32V_SE))
  action = {
    // TODO:
  }

op vmpop(rd: X, vs1: VR)
  init = {
    func7_0 = 0b1010;
    func7_1 = 0b111;
    vs2_const = 0b00001;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vmpop %s, %s", rd.syntax, vs1.syntax)
  image  = format("%4s%3s%5s%5s%1s%2s%5s%7s",
                 func7_0, func7_1, vs2_const, vs1.image, vp, m, rd.image, coerce(card(7), RV32V_SE))
  action = {
    // TODO:
  }

op vmfirst(rd: X, vs1: VR)
  init = {
    func7_0 = 0b1010;
    func7_1 = 0b111;
    vs2_const = 0b00000;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vmfirst %s, %s", rd.syntax, vs1.syntax)
  image  = format("%4s%3s%5s%5s%1s%2s%5s%7s",
                 func7_0, func7_1, vs2_const, vs1.image, vp, m, rd.image, coerce(card(7), RV32V_SE))
  action = {
    // TODO:
  }

//1010 000 rs2 vs1 1 m rd 1100111 VEXTRACT
//1011 100 rs2 rs1 1 m vd 1100111 VINSERT

op vextract(rd: X, vs1: VR, rs2: X)
  init = {
    func7_0 = 0b1010;
    func7_1 = 0b000;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vextract %s, %s, %s", rd.syntax, vs1.syntax, rs2.syntax)
  image  = format("%4s%3s%5s%5s%1s%2s%5s%7s",
                 func7_0, func7_1, rs2.image, vs1.image, vp, m, rd.image, coerce(card(7), RV32V_SE))
  action = {
    // TODO:
  }

op vinsert(vd: VR, rs1: X, rs2: X)
  init = {
    func7_0 = 0b1011;
    func7_1 = 0b100;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vinsert %s, %s, %s", vd.syntax, rs1.syntax, rs2.syntax)
  image  = format("%4s%3s%5s%5s%1s%2s%5s%7s",
                 func7_0, func7_1, rs2.image, rs1.image, vp, m, vd.image, coerce(card(7), RV32V_SE))
  action = {
    // TODO:
  }

op vmerge(vd: VR, vs1: VR, vs2: VR)
  init = {
    func7_0 = 0b1100;
    func7_1 = 0b001;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vmerge %s, %s, %s", vd.syntax, vs1.syntax, vs2.syntax)
  image  = format("%4s%3s%5s%5s%1s%2s%5s%7s",
                 func7_0, func7_1, vs2.image, vs1.image, vp, m, vd.image, coerce(card(7), RV32V_SE))
  action = {
    // TODO:
  }

op vselect(vd: VR, vs1: VR, vs2: VR)
  init = {
    func7_0 = 0b1100;
    func7_1 = 0b010;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vselect %s, %s, %s", vd.syntax, vs1.syntax, vs2.syntax)
  image  = format("%4s%3s%5s%5s%1s%2s%5s%7s",
                 func7_0, func7_1, vs2.image, vs1.image, vp, m, vd.image, coerce(card(7), RV32V_SE))
  action = {
    // TODO:
  }

op vslide(vd: VR, vs1: VR, rs2: X)
  init = {
    func7_0 = 0b1011;
    func7_1 = 0b010;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vslide %s, %s, %s", vd.syntax, vs1.syntax, rs2.syntax)
  image  = format("%4s%3s%5s%5s%1s%2s%5s%7s",
                 func7_0, func7_1, rs2.image, vs1.image, vp, m, vd.image, coerce(card(7), RV32V_SE))
  action = {
    // TODO:
  }

op vdiv(vd: VR, vs1: VR, vs2: VR)
  init = {
    func7_0 = 0b1000;
    func7_1 = 0b100;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vdiv %s, %s, %s", vd.syntax, vs1.syntax, vs2.syntax)
  image  = format("%4s%3s%5s%5s%1s%2s%5s%7s",
                 func7_0, func7_1, vs2.image, vs1.image, vp, m, vd.image, coerce(card(7), RV32V_SE))
  action = {
    // TODO:
  }

op vrem(vd: VR, vs1: VR, vs2: VR)
  init = {
    func7_0 = 0b1000;
    func7_1 = 0b101;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vrem %s, %s, %s", vd.syntax, vs1.syntax, vs2.syntax)
  image  = format("%4s%3s%5s%5s%1s%2s%5s%7s",
                 func7_0, func7_1, vs2.image, vs1.image, vp, m, vd.image, coerce(card(7), RV32V_SE))
  action = {
    // TODO:
  }

op vmul(vd: VR, vs1: VR, vs2: VR)
  init = {
    func7_0 = 0b1000;
    func7_1 = 0b110;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vmul %s, %s, %s", vd.syntax, vs1.syntax, vs2.syntax)
  image  = format("%4s%3s%5s%5s%1s%2s%5s%7s",
                 func7_0, func7_1, vs2.image, vs1.image, vp, m, vd.image, coerce(card(7), RV32V_SE))
  action = {
    // TODO:
  }

op vmulh(vd: VR, vs1: VR, vs2: VR)
  init = {
    func7_0 = 0b1000;
    func7_1 = 0b111;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vmulh %s, %s, %s", vd.syntax, vs1.syntax, vs2.syntax)
  image  = format("%4s%3s%5s%5s%1s%2s%5s%7s",
                 func7_0, func7_1, vs2.image, vs1.image, vp, m, vd.image, coerce(card(7), RV32V_SE))
  action = {
    // TODO:
  }

op vmin(vd: VR, vs1: VR, vs2: VR)
  init = {
    func7_0 = 0b1000;
    func7_1 = 0b010;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vmin %s, %s, %s", vd.syntax, vs1.syntax, vs2.syntax)
  image  = format("%4s%3s%5s%5s%1s%2s%5s%7s",
                 func7_0, func7_1, vs2.image, vs1.image, vp, m, vd.image, coerce(card(7), RV32V_SE))
  action = {
    // TODO:
  }

op vmax(vd: VR, vs1: VR, vs2: VR)
  init = {
    func7_0 = 0b1000;
    func7_1 = 0b011;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vmax %s, %s, %s", vd.syntax, vs1.syntax, vs2.syntax)
  image  = format("%4s%3s%5s%5s%1s%2s%5s%7s",
                 func7_0, func7_1, vs2.image, vs1.image, vp, m, vd.image, coerce(card(7), RV32V_SE))
  action = {
    // TODO:
  }

op vsgnj(vd: VR, vs1: VR, vs2: VR)
  init = {
    func7_0 = 0b1001;
    func7_1 = 0b010;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vsgnj %s, %s, %s", vd.syntax, vs1.syntax, vs2.syntax)
  image  = format("%4s%3s%5s%5s%1s%2s%5s%7s",
                 func7_0, func7_1, vs2.image, vs1.image, vp, m, vd.image, coerce(card(7), RV32V_SE))
  action = {
    // TODO:
  }

op vsgnjn(vd: VR, vs1: VR, vs2: VR)
  init = {
    func7_0 = 0b1001;
    func7_1 = 0b011;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vsgnjn %s, %s, %s", vd.syntax, vs1.syntax, vs2.syntax)
  image  = format("%4s%3s%5s%5s%1s%2s%5s%7s",
                 func7_0, func7_1, vs2.image, vs1.image, vp, m, vd.image, coerce(card(7), RV32V_SE))
  action = {
    // TODO:
  }

op vsgnjx(vd: VR, vs1: VR, vs2: VR)
  init = {
    func7_0 = 0b1001;
    func7_1 = 0b001;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vsgnjn %s, %s, %s", vd.syntax, vs1.syntax, vs2.syntax)
  image  = format("%4s%3s%5s%5s%1s%2s%5s%7s",
                 func7_0, func7_1, vs2.image, vs1.image, vp, m, vd.image, coerce(card(7), RV32V_SE))
  action = {
    // TODO:
  }

op vsqrt(vd: VR, vs1: VR)
  init = {
    func7_0 = 0b1100;
    func7_1 = 0b111;
    vs2_const = 0b00010;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vsqrt %s, %s", vd.syntax, vs1.syntax)
  image  = format("%4s%3s%5s%5s%1s%2s%5s%7s",
                 func7_0, func7_1, vs2_const, vs1.image, vp, m, vd.image, coerce(card(7), RV32V_SE))
  action = {
    // TODO:
  }

op vclass(vd: VR, vs1: VR)
  init = {
    func7_0 = 0b1100;
    func7_1 = 0b111;
    vs2_const = 0b00000;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vclass %s, %s", vd.syntax, vs1.syntax)
  image  = format("%4s%3s%5s%5s%1s%2s%5s%7s",
                 func7_0, func7_1, vs2_const, vs1.image, vp, m, vd.image, coerce(card(7), RV32V_SE))
  action = {
    // TODO:
  }

op vpopc(vd: VR, vs1: VR)
  init = {
    func7_0 = 0b1100;
    func7_1 = 0b111;
    vs2_const = 0b00001;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vpopc %s, %s", vd.syntax, vs1.syntax)
  image  = format("%4s%3s%5s%5s%1s%2s%5s%7s",
                 func7_0, func7_1, vs2_const, vs1.image, vp, m, vd.image, coerce(card(7), RV32V_SE))
  action = {
    // TODO:
  }

op vaddi(vd: VR, vs1: VR, imm: card(8))
  init = {
    func7_0 = 0b0000;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vaddi %s, %s, %d", vd.syntax, vs1.syntax, imm)
  image  = format("%4s%8s%5s%1s%2s%5s%7s",
                 func7_0, imm, vs1.image, vp, m, vd.image, coerce(card(7), RV32V_SE))
  action = {
    // TODO:
  }

op vsli(vd: VR, vs1: VR, imm: card(8))
  init = {
    func7_0 = 0b0001;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vsli %s, %s, %d", vd.syntax, vs1.syntax, imm)
  image  = format("%4s%8s%5s%1s%2s%5s%7s",
                 func7_0, imm, vs1.image, vp, m, vd.image, coerce(card(7), RV32V_SE))
  action = {
    // TODO:
  }

op vsri(vd: VR, vs1: VR, imm: card(8))
  init = {
    func7_0 = 0b0101;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vsri %s, %s, %d", vd.syntax, vs1.syntax, imm)
  image  = format("%4s%8s%5s%1s%2s%5s%7s",
                 func7_0, imm, vs1.image, vp, m, vd.image, coerce(card(7), RV32V_SE))
  action = {
    // TODO:
  }

op vandi(vd: VR, vs1: VR, imm: card(8))
  init = {
    func7_0 = 0b0111;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vandi %s, %s, %d", vd.syntax, vs1.syntax, imm)
  image  = format("%4s%8s%5s%1s%2s%5s%7s",
                 func7_0, imm, vs1.image, vp, m, vd.image, coerce(card(7), RV32V_SE))
  action = {
    // TODO:
  }

op vori(vd: VR, vs1: VR, imm: card(8))
  init = {
    func7_0 = 0b0110;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vori %s, %s, %d", vd.syntax, vs1.syntax, imm)
  image  = format("%4s%8s%5s%1s%2s%5s%7s",
                 func7_0, imm, vs1.image, vp, m, vd.image, coerce(card(7), RV32V_SE))
  action = {
    // TODO:
  }

op vxori(vd: VR, vs1: VR, imm: card(8))
  init = {
    func7_0 = 0b0100;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vxori %s, %s, %d", vd.syntax, vs1.syntax, imm)
  image  = format("%4s%8s%5s%1s%2s%5s%7s",
                 func7_0, imm, vs1.image, vp, m, vd.image, coerce(card(7), RV32V_SE))
  action = {
    // TODO:
  }

op vclipi(vd: VR, vs1: VR, imm: card(8))
  init = {
    func7_0 = 0b0011;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vclipi %s, %s, %d", vd.syntax, vs1.syntax, imm)
  image  = format("%4s%8s%5s%1s%2s%5s%7s",
                 func7_0, imm, vs1.image, vp, m, vd.image, coerce(card(7), RV32V_SE))
  action = {
    // TODO:
  }

op vmadd(vd: VR, vs1: VR, vs2: VR, vs3: VR)
  init = {
    im_2b = 0b00;
    vp = 0;
    m = 0b00;
  }
  syntax = format("vmadd %s, %s, %s, %s", vd.syntax, vs1.syntax, vs2.syntax, vs3.syntax)
  image  = format("%5s%2s%5s%5s%1s%2s%5s%7s",
                 vs3.image, im_2b , vs2.image, vs1.image, vp, m, vd.image, coerce(card(7), RV32V_SE))
  action = {
    // TODO:
  }

op vmsub(vd: VR, vs1: VR, vs2: VR, vs3: VR)
  init = {
    im_2b = 0b01;
    vp = 0;
    m = 0b00;
  }
  syntax = format("vmsub %s, %s, %s, %s", vd.syntax, vs1.syntax, vs2.syntax, vs3.syntax)
  image  = format("%5s%2s%5s%5s%1s%2s%5s%7s",
                 vs3.image, im_2b , vs2.image, vs1.image, vp, m, vd.image, coerce(card(7), RV32V_SE))
  action = {
    // TODO:
  }

op vnmadd(vd: VR, vs1: VR, vs2: VR, vs3: VR)
  init = {
    im_2b = 0b11;
    vp = 0;
    m = 0b00;
  }
  syntax = format("vnmadd %s, %s, %s, %s", vd.syntax, vs1.syntax, vs2.syntax, vs3.syntax)
  image  = format("%5s%2s%5s%5s%1s%2s%5s%7s",
                 vs3.image, im_2b , vs2.image, vs1.image, vp, m, vd.image, coerce(card(7), RV32V_SE))
  action = {
    // TODO:
  }

op vnmsub(vd: VR, vs1: VR, vs2: VR, vs3: VR)
  init = {
    im_2b = 0b10;
    vp = 0;
    m = 0b00;
  }
  syntax = format("vnmsub %s, %s, %s, %s", vd.syntax, vs1.syntax, vs2.syntax, vs3.syntax)
  image  = format("%5s%2s%5s%5s%1s%2s%5s%7s",
                 vs3.image, im_2b , vs2.image, vs1.image, vp, m, vd.image, coerce(card(7), RV32V_SE))
  action = {
    // TODO:
  }

//==================================================================================================
// RV32V Standard Extension (cont.)
//==================================================================================================

op vld(vd: VR, rs1: X, imm: card(5))
  init = {
    im_2b = 0b00;
    vs2_const = 0b00000;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vld %s, %s, %d", vd.syntax, rs1.syntax, imm)
  image  = format("%5s%2s%5s%5s%1s%2s%5s%7s",
                 imm, im_2b, vs2_const, rs1.image, vp, m, vd.image, coerce(card(7), RV32V_SEC1))
  action = {
    // TODO:
  }

op vlds(vd: VR, rs1: X, rs2: X, imm: card(5))
  init = {
    im_2b = 0b01;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vlds %s, %s, %s, %d", vd.syntax, rs1.syntax, rs2.syntax, imm)
  image  = format("%5s%2s%5s%5s%1s%2s%5s%7s",
                 imm, im_2b, rs2.image, rs1.image, vp, m, vd.image, coerce(card(7), RV32V_SEC1))
  action = {
    // TODO:
  }

op vldx(vd: VR, rs1: X, vs2: VR, imm: card(5))
  init = {
    im_2b = 0b10;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vldx %s, %s, %s, %d", vd.syntax, rs1.syntax, vs2.syntax, imm)
  image  = format("%5s%2s%5s%5s%1s%2s%5s%7s",
                 imm, im_2b, vs2.image, rs1.image, vp, m, vd.image, coerce(card(7), RV32V_SEC1))
  action = {
    // TODO:
  }

op vst(rs1: X, vs3: VR, imm: card(5))
  init = {
    im_2b = 0b00;
    vs2_const = 0b00000;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vst %s, %s, %d", rs1.syntax, vs3.syntax, imm)
  image  = format("%5s%2s%5s%5s%1s%2s%5s%7s",
                 vs3.image, im_2b, vs2_const, rs1.image, vp, m, imm, coerce(card(7), RV32V_SEC2))
  action = {
    // TODO:
  }

op vsts(rs1: X, rs2: X, vs3: VR, imm: card(5))
  init = {
    im_2b = 0b01;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vsts %s, %s, %s, %d", rs1.syntax, rs2.syntax, vs3.syntax, imm)
  image  = format("%5s%2s%5s%5s%1s%2s%5s%7s",
                 vs3.image, im_2b, rs2.image, rs1.image, vp, m, imm, coerce(card(7), RV32V_SEC2))
  action = {
    // TODO:
  }

op vstx(rs1: X, vs2: VR, vs3: VR, imm: card(5))
  init = {
    im_2b = 0b10;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vstx %s, %s, %s, %d", rs1.syntax, vs2.syntax, vs3.syntax, imm)
  image  = format("%5s%2s%5s%5s%1s%2s%5s%7s",
                 vs3.image, im_2b, vs2.image, rs1.image, vp, m, imm, coerce(card(7), RV32V_SEC2))
  action = {
    // TODO:
  }

op vamoswap(vd: VR, vs2: VR, vs3: VR)
  init = {
    im_2b = 0b11;
    vs2_const = 0b00001;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vamoswap %s, %s, %s", vd.syntax, vs2.syntax, vs3.syntax)
  image  = format("%5s%2s%5s%5s%1s%2s%5s%7s",
                 vs3.image, im_2b , vs2.image, vs2_const, vp, m, vd.image, coerce(card(7), RV32V_SEC2))
  action = {
    // TODO:
  }

op vamoadd(vd: VR, vs2: VR, vs3: VR)
  init = {
    im_2b = 0b11;
    vs2_const = 0b00000;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vamoadd %s, %s, %s", vd.syntax, vs2.syntax, vs3.syntax)
  image  = format("%5s%2s%5s%5s%1s%2s%5s%7s",
                 vs3.image, im_2b , vs2.image, vs2_const, vp, m, vd.image, coerce(card(7), RV32V_SEC2))
  action = {
    // TODO:
  }

op vamoand(vd: VR, vs2: VR, vs3: VR)
  init = {
    im_2b = 0b11;
    vs2_const = 0b01100;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vamoand %s, %s, %s", vd.syntax, vs2.syntax, vs3.syntax)
  image  = format("%5s%2s%5s%5s%1s%2s%5s%7s",
                 vs3.image, im_2b , vs2.image, vs2_const, vp, m, vd.image, coerce(card(7), RV32V_SEC2))
  action = {
    // TODO:
  }

op vamoor(vd: VR, vs2: VR, vs3: VR)
  init = {
    im_2b = 0b11;
    vs2_const = 0b01000;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vamoor %s, %s, %s", vd.syntax, vs2.syntax, vs3.syntax)
  image  = format("%5s%2s%5s%5s%1s%2s%5s%7s",
                 vs3.image, im_2b , vs2.image, vs2_const, vp, m, vd.image, coerce(card(7), RV32V_SEC2))
  action = {
    // TODO:
  }

op vamoxor(vd: VR, vs2: VR, vs3: VR)
  init = {
    im_2b = 0b11;
    vs2_const = 0b00100;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vamoxor %s, %s, %s", vd.syntax, vs2.syntax, vs3.syntax)
  image  = format("%5s%2s%5s%5s%1s%2s%5s%7s",
                 vs3.image, im_2b , vs2.image, vs2_const, vp, m, vd.image, coerce(card(7), RV32V_SEC2))
  action = {
    // TODO:
  }

op vamomin(vd: VR, vs2: VR, vs3: VR)
  init = {
    im_2b = 0b11;
    vs2_const = 0b10000;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vamomin %s, %s, %s", vd.syntax, vs2.syntax, vs3.syntax)
  image  = format("%5s%2s%5s%5s%1s%2s%5s%7s",
                 vs3.image, im_2b , vs2.image, vs2_const, vp, m, vd.image, coerce(card(7), RV32V_SEC2))
  action = {
    // TODO:
  }

op vamomax(vd: VR, vs2: VR, vs3: VR)
  init = {
    im_2b = 0b11;
    vs2_const = 0b10100;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vamomax %s, %s, %s", vd.syntax, vs2.syntax, vs3.syntax)
  image  = format("%5s%2s%5s%5s%1s%2s%5s%7s",
                 vs3.image, im_2b , vs2.image, vs2_const, vp, m, vd.image, coerce(card(7), RV32V_SEC2))
  action = {
    // TODO:
  }

         // RV32V Standard Extension
op rv32v = vadd
         | vsub
         | vsl
         | vsr
         | vand
         | vor
         | vxor
         | vseq
         | vsne
         | vslt //1
         | vsge
         | vclip
         | vcvt
         | vmpop
         | vmfirst
         | vextract
         | vinsert
         | vmerge
         | vselect
         | vslide // 2
         | vdiv
         | vrem
         | vmul
         | vmulh
         | vmin
         | vmax
         | vsgnj
         | vsgnjn
         | vsgnjx
         | vsqrt // 3
         | vclass
         | vpopc 
         | vaddi
         | vsli
         | vsri
         | vandi
         | vori
         | vxori
         | vclipi
         | vmadd //4
         | vmsub
         | vnmadd
         | vnmsub
         // RV32V Standard Extension (cont.)
         | vld
         | vlds
         | vldx
         | vst
         | vsts
         | vstx
         | vamoswap // 50
         | vamoadd
         | vamoand
         | vamoor
         | vamoxor
         | vamomin
         | vamomax

//==================================================================================================
// The End
//==================================================================================================

#endif
